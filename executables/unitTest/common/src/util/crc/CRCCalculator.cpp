// Copyright 2024 Accenture.

#include "util/crc/CRCCalculator.h"

uint16_t const CRCCalculator::crc16Table[256]
    = {0x0000U, 0xC0C1U, 0xC181U, 0x0140U, 0xC301U, 0x03C0U, 0x0280U, 0xC241U, 0xC601U, 0x06C0U,
       0x0780U, 0xC741U, 0x0500U, 0xC5C1U, 0xC481U, 0x0440U, 0xCC01U, 0x0CC0U, 0x0D80U, 0xCD41U,
       0x0F00U, 0xCFC1U, 0xCE81U, 0x0E40U, 0x0A00U, 0xCAC1U, 0xCB81U, 0x0B40U, 0xC901U, 0x09C0U,
       0x0880U, 0xC841U, 0xD801U, 0x18C0U, 0x1980U, 0xD941U, 0x1B00U, 0xDBC1U, 0xDA81U, 0x1A40U,
       0x1E00U, 0xDEC1U, 0xDF81U, 0x1F40U, 0xDD01U, 0x1DC0U, 0x1C80U, 0xDC41U, 0x1400U, 0xD4C1U,
       0xD581U, 0x1540U, 0xD701U, 0x17C0U, 0x1680U, 0xD641U, 0xD201U, 0x12C0U, 0x1380U, 0xD341U,
       0x1100U, 0xD1C1U, 0xD081U, 0x1040U, 0xF001U, 0x30C0U, 0x3180U, 0xF141U, 0x3300U, 0xF3C1U,
       0xF281U, 0x3240U, 0x3600U, 0xF6C1U, 0xF781U, 0x3740U, 0xF501U, 0x35C0U, 0x3480U, 0xF441U,
       0x3C00U, 0xFCC1U, 0xFD81U, 0x3D40U, 0xFF01U, 0x3FC0U, 0x3E80U, 0xFE41U, 0xFA01U, 0x3AC0U,
       0x3B80U, 0xFB41U, 0x3900U, 0xF9C1U, 0xF881U, 0x3840U, 0x2800U, 0xE8C1U, 0xE981U, 0x2940U,
       0xEB01U, 0x2BC0U, 0x2A80U, 0xEA41U, 0xEE01U, 0x2EC0U, 0x2F80U, 0xEF41U, 0x2D00U, 0xEDC1U,
       0xEC81U, 0x2C40U, 0xE401U, 0x24C0U, 0x2580U, 0xE541U, 0x2700U, 0xE7C1U, 0xE681U, 0x2640U,
       0x2200U, 0xE2C1U, 0xE381U, 0x2340U, 0xE101U, 0x21C0U, 0x2080U, 0xE041U, 0xA001U, 0x60C0U,
       0x6180U, 0xA141U, 0x6300U, 0xA3C1U, 0xA281U, 0x6240U, 0x6600U, 0xA6C1U, 0xA781U, 0x6740U,
       0xA501U, 0x65C0U, 0x6480U, 0xA441U, 0x6C00U, 0xACC1U, 0xAD81U, 0x6D40U, 0xAF01U, 0x6FC0U,
       0x6E80U, 0xAE41U, 0xAA01U, 0x6AC0U, 0x6B80U, 0xAB41U, 0x6900U, 0xA9C1U, 0xA881U, 0x6840U,
       0x7800U, 0xB8C1U, 0xB981U, 0x7940U, 0xBB01U, 0x7BC0U, 0x7A80U, 0xBA41U, 0xBE01U, 0x7EC0U,
       0x7F80U, 0xBF41U, 0x7D00U, 0xBDC1U, 0xBC81U, 0x7C40U, 0xB401U, 0x74C0U, 0x7580U, 0xB541U,
       0x7700U, 0xB7C1U, 0xB681U, 0x7640U, 0x7200U, 0xB2C1U, 0xB381U, 0x7340U, 0xB101U, 0x71C0U,
       0x7080U, 0xB041U, 0x5000U, 0x90C1U, 0x9181U, 0x5140U, 0x9301U, 0x53C0U, 0x5280U, 0x9241U,
       0x9601U, 0x56C0U, 0x5780U, 0x9741U, 0x5500U, 0x95C1U, 0x9481U, 0x5440U, 0x9C01U, 0x5CC0U,
       0x5D80U, 0x9D41U, 0x5F00U, 0x9FC1U, 0x9E81U, 0x5E40U, 0x5A00U, 0x9AC1U, 0x9B81U, 0x5B40U,
       0x9901U, 0x59C0U, 0x5880U, 0x9841U, 0x8801U, 0x48C0U, 0x4980U, 0x8941U, 0x4B00U, 0x8BC1U,
       0x8A81U, 0x4A40U, 0x4E00U, 0x8EC1U, 0x8F81U, 0x4F40U, 0x8D01U, 0x4DC0U, 0x4C80U, 0x8C41U,
       0x4400U, 0x84C1U, 0x8581U, 0x4540U, 0x8701U, 0x47C0U, 0x4680U, 0x8641U, 0x8201U, 0x42C0U,
       0x4380U, 0x8341U, 0x4100U, 0x81C1U, 0x8081U, 0x4040U};

uint8_t const CRCCalculator::crc8Table[256]
    = {0x00U, 0x1dU, 0x3aU, 0x27U, 0x74U, 0x69U, 0x4eU, 0x53U, 0xe8U, 0xf5U, 0xd2U, 0xcfU, 0x9cU,
       0x81U, 0xa6U, 0xbbU, 0xcdU, 0xd0U, 0xf7U, 0xeaU, 0xb9U, 0xa4U, 0x83U, 0x9eU, 0x25U, 0x38U,
       0x1fU, 0x02U, 0x51U, 0x4cU, 0x6bU, 0x76U, 0x87U, 0x9aU, 0xbdU, 0xa0U, 0xf3U, 0xeeU, 0xc9U,
       0xd4U, 0x6fU, 0x72U, 0x55U, 0x48U, 0x1bU, 0x06U, 0x21U, 0x3cU, 0x4aU, 0x57U, 0x70U, 0x6dU,
       0x3eU, 0x23U, 0x04U, 0x19U, 0xa2U, 0xbfU, 0x98U, 0x85U, 0xd6U, 0xcbU, 0xecU, 0xf1U, 0x13U,
       0x0eU, 0x29U, 0x34U, 0x67U, 0x7aU, 0x5dU, 0x40U, 0xfbU, 0xe6U, 0xc1U, 0xdcU, 0x8fU, 0x92U,
       0xb5U, 0xa8U, 0xdeU, 0xc3U, 0xe4U, 0xf9U, 0xaaU, 0xb7U, 0x90U, 0x8dU, 0x36U, 0x2bU, 0x0cU,
       0x11U, 0x42U, 0x5fU, 0x78U, 0x65U, 0x94U, 0x89U, 0xaeU, 0xb3U, 0xe0U, 0xfdU, 0xdaU, 0xc7U,
       0x7cU, 0x61U, 0x46U, 0x5bU, 0x08U, 0x15U, 0x32U, 0x2fU, 0x59U, 0x44U, 0x63U, 0x7eU, 0x2dU,
       0x30U, 0x17U, 0x0aU, 0xb1U, 0xacU, 0x8bU, 0x96U, 0xc5U, 0xd8U, 0xffU, 0xe2U, 0x26U, 0x3bU,
       0x1cU, 0x01U, 0x52U, 0x4fU, 0x68U, 0x75U, 0xceU, 0xd3U, 0xf4U, 0xe9U, 0xbaU, 0xa7U, 0x80U,
       0x9dU, 0xebU, 0xf6U, 0xd1U, 0xccU, 0x9fU, 0x82U, 0xa5U, 0xb8U, 0x03U, 0x1eU, 0x39U, 0x24U,
       0x77U, 0x6aU, 0x4dU, 0x50U, 0xa1U, 0xbcU, 0x9bU, 0x86U, 0xd5U, 0xc8U, 0xefU, 0xf2U, 0x49U,
       0x54U, 0x73U, 0x6eU, 0x3dU, 0x20U, 0x07U, 0x1aU, 0x6cU, 0x71U, 0x56U, 0x4bU, 0x18U, 0x05U,
       0x22U, 0x3fU, 0x84U, 0x99U, 0xbeU, 0xa3U, 0xf0U, 0xedU, 0xcaU, 0xd7U, 0x35U, 0x28U, 0x0fU,
       0x12U, 0x41U, 0x5cU, 0x7bU, 0x66U, 0xddU, 0xc0U, 0xe7U, 0xfaU, 0xa9U, 0xb4U, 0x93U, 0x8eU,
       0xf8U, 0xe5U, 0xc2U, 0xdfU, 0x8cU, 0x91U, 0xb6U, 0xabU, 0x10U, 0x0dU, 0x2aU, 0x37U, 0x64U,
       0x79U, 0x5eU, 0x43U, 0xb2U, 0xafU, 0x88U, 0x95U, 0xc6U, 0xdbU, 0xfcU, 0xe1U, 0x5aU, 0x47U,
       0x60U, 0x7dU, 0x2eU, 0x33U, 0x14U, 0x09U, 0x7fU, 0x62U, 0x45U, 0x58U, 0x0bU, 0x16U, 0x31U,
       0x2cU, 0x97U, 0x8aU, 0xadU, 0xb0U, 0xe3U, 0xfeU, 0xd9U, 0xc4U};

/* x^8 + x^2 + x + 1 */
uint8_t const CRCCalculator::crc8TableATM[256]
    = {0x0U,  0x7U,  0xEU,  0x9U,  0x1CU, 0x1BU, 0x12U, 0x15U, 0x38U, 0x3FU, 0x36U, 0x31U, 0x24U,
       0x23U, 0x2AU, 0x2DU, 0x70U, 0x77U, 0x7EU, 0x79U, 0x6CU, 0x6BU, 0x62U, 0x65U, 0x48U, 0x4FU,
       0x46U, 0x41U, 0x54U, 0x53U, 0x5AU, 0x5DU, 0xE0U, 0xE7U, 0xEEU, 0xE9U, 0xFCU, 0xFBU, 0xF2U,
       0xF5U, 0xD8U, 0xDFU, 0xD6U, 0xD1U, 0xC4U, 0xC3U, 0xCAU, 0xCDU, 0x90U, 0x97U, 0x9EU, 0x99U,
       0x8CU, 0x8BU, 0x82U, 0x85U, 0xA8U, 0xAFU, 0xA6U, 0xA1U, 0xB4U, 0xB3U, 0xBAU, 0xBDU, 0xC7U,
       0xC0U, 0xC9U, 0xCEU, 0xDBU, 0xDCU, 0xD5U, 0xD2U, 0xFFU, 0xF8U, 0xF1U, 0xF6U, 0xE3U, 0xE4U,
       0xEDU, 0xEAU, 0xB7U, 0xB0U, 0xB9U, 0xBEU, 0xABU, 0xACU, 0xA5U, 0xA2U, 0x8FU, 0x88U, 0x81U,
       0x86U, 0x93U, 0x94U, 0x9DU, 0x9AU, 0x27U, 0x20U, 0x29U, 0x2EU, 0x3BU, 0x3CU, 0x35U, 0x32U,
       0x1FU, 0x18U, 0x11U, 0x16U, 0x3U,  0x4U,  0xDU,  0xAU,  0x57U, 0x50U, 0x59U, 0x5EU, 0x4BU,
       0x4CU, 0x45U, 0x42U, 0x6FU, 0x68U, 0x61U, 0x66U, 0x73U, 0x74U, 0x7DU, 0x7AU, 0x89U, 0x8EU,
       0x87U, 0x80U, 0x95U, 0x92U, 0x9BU, 0x9CU, 0xB1U, 0xB6U, 0xBFU, 0xB8U, 0xADU, 0xAAU, 0xA3U,
       0xA4U, 0xF9U, 0xFEU, 0xF7U, 0xF0U, 0xE5U, 0xE2U, 0xEBU, 0xECU, 0xC1U, 0xC6U, 0xCFU, 0xC8U,
       0xDDU, 0xDAU, 0xD3U, 0xD4U, 0x69U, 0x6EU, 0x67U, 0x60U, 0x75U, 0x72U, 0x7BU, 0x7CU, 0x51U,
       0x56U, 0x5FU, 0x58U, 0x4DU, 0x4AU, 0x43U, 0x44U, 0x19U, 0x1EU, 0x17U, 0x10U, 0x5U,  0x2U,
       0xBU,  0xCU,  0x21U, 0x26U, 0x2FU, 0x28U, 0x3DU, 0x3AU, 0x33U, 0x34U, 0x4EU, 0x49U, 0x40U,
       0x47U, 0x52U, 0x55U, 0x5CU, 0x5BU, 0x76U, 0x71U, 0x78U, 0x7FU, 0x6AU, 0x6DU, 0x64U, 0x63U,
       0x3EU, 0x39U, 0x30U, 0x37U, 0x22U, 0x25U, 0x2CU, 0x2BU, 0x6U,  0x1U,  0x8U,  0xFU,  0x1AU,
       0x1DU, 0x14U, 0x13U, 0xAEU, 0xA9U, 0xA0U, 0xA7U, 0xB2U, 0xB5U, 0xBCU, 0xBBU, 0x96U, 0x91U,
       0x98U, 0x9FU, 0x8AU, 0x8DU, 0x84U, 0x83U, 0xDEU, 0xD9U, 0xD0U, 0xD7U, 0xC2U, 0xC5U, 0xCCU,
       0xCBU, 0xE6U, 0xE1U, 0xE8U, 0xEFU, 0xFAU, 0xFDU, 0xF4U, 0xF3U};

uint16_t CRCCalculator::getCRC16(uint8_t const* const pBuffer, uint32_t const bufferLength)
{
    return getCRC16(static_cast<uint16_t>(0), pBuffer, bufferLength);
}

uint16_t CRCCalculator::getCRC16(
    uint16_t preResult, uint8_t const* const pBuffer, uint32_t const bufferLength)
{
    for (uint32_t posInBuffer = 0U; posInBuffer < bufferLength; ++posInBuffer)
    {
        preResult = (preResult >> 8U) ^ crc16Table[(preResult & 0xFFU) ^ pBuffer[posInBuffer]];
    }
    return preResult;
}

uint8_t CRCCalculator::getCRC8(
    uint16_t const applicationId, uint8_t const* const pBuffer, uint16_t const bufferLength)
{ /* CRC initial value [CRC8003] */
    uint8_t crc_value = 0U;
    /* Calculate CRC of low byte of ApplicationId */
    crc_value         = crc8Table[static_cast<uint8_t>(applicationId & 0x00ffU)];
    /* Calculate CRC of high byte of ApplicationId */
    crc_value         = crc8Table[crc_value ^ static_cast<uint8_t>(applicationId >> 8U)];
    /* Calculate CRC of data block */
    for (uint16_t count = 0U; count < bufferLength; ++count)
    {
        crc_value = crc8Table[crc_value ^ pBuffer[count]];
    }
    return crc_value;
}

uint8_t CRCCalculator::getCRC8ATM(
    uint8_t const initValue, uint8_t const* const pBuffer, uint16_t const bufferLength)
{
    uint8_t crc_value = initValue;
    /* Calculate CRC of data block */
    for (uint16_t count = 0U; count < bufferLength; ++count)
    {
        crc_value = crc8TableATM[crc_value ^ pBuffer[count]];
    }
    return crc_value;
}
